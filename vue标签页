
export const state={
      visitedviews:[],//存放所有浏览过的且不重复的路由数据
    }

export const mutations={  
     ADD_VISITED_VIEWS:(state,view)=>{//打开新页签--添加路由数据的方法     
        state.visitedviews.push({
          name:view.name,
          path:view.path,
          title:view.meta.title || 'no-title'
        })
      },
      DEL_VISITED_VIEWS:(state,view)=>{//关闭页签--删除路由数据的方法
        for(let [i,v] of state.visitedviews.entries()){
          if(v.path == view.path){
            state.visitedviews.splice(i,1)
            break
          }
        }
      }
}
export const actions={//调用这里去触发mutations，在组件内使用this.$store.dispatch('action中对应名字', 参数)
      addVisitedViews({commit},view){
        for(let [i,v] of state.visitedviews.entries()){
          if(v.path == view.path){      //当前路由已存在标签页
            return
          }
        }
        commit('ADD_VISITED_VIEWS',view)
      },
      delVisitedViews({commit,state},view){//删除数组存放的路由之后，需要再去刷新路由，这是一个异步的过程，需要有回掉函数，所以使用并返回promise对象，也可以让组件在调用的时候接着使用.then的方法
        return new Promise((resolve)=>{//resolve方法：未来成功后回掉的方法
          commit('DEL_VISITED_VIEWS',view);
          resolve([...state.visitedviews]);
        })
      }
    }
export default { state, mutations, actions }

    // visitedViews来自计算属性：
    // computed:{
    //     visitedViews(){//store中取值
    //       return this.$store.state.tagsview.visitedviews
    //     }
    //   },


    //isActive()方法是用来判断页签的路由是否为当前路由

    // methods:{
    //     isActive(route){
    //       return route.path == this.$route.path
    //     },
    //   }



  //  另外，点击左侧菜单树，或者点击其他的tab页签，会导致路由的改变，那么就需要一个watcher
    // watch:{
    //     $route(){
    //       this.addViewTags();
    //     }
    //   },

    // methods:{
    //     addViewTags(){//路由改变时执行的方法
    //       if(this.$route.name){
    //         const route = this.$route
    //          this.$store.dispatch('addVisitedViews',route);
    //       }
    //     },   
    //   }

    // methods:{
    //     delSelectTag(route){//先提交删除数据的方法,数组删除出掉数据后，如果关闭的是当前打开的路由需要将路由改为数组最后一次push进去的路由
    //       this.$store.dispatch('delVisitedViews',route).then((views)=>{
    //         if(this.isActive(route)){//只有在关闭当前打开的标签页才会有影响
    //           let lastView = views.slice(-1)[0]//选取路由数组中的最后一位
    //           if(lastView){
    //             this.$router.push(lastView);
    //           }else{
    //             this.$router.push('/');
    //           }
    //         }
    //       })
    //     }
    //   }
